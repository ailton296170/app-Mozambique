import { useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";
import { loadStripe } from "@stripe/stripe-js";

// Supabase setup
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Stripe setup
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);

export default function Home() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [videos, setVideos] = useState([]);
  const [courses, setCourses] = useState([]);

  // Handle user authentication
  useEffect(() => {
    const session = supabase.auth.session();
    setUser(session?.user ?? null);

    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
      setUser(session?.user ?? null);
    });

    return () => {
      authListener?.unsubscribe();
    };
  }, []);

  // Fetch videos and courses
  useEffect(() => {
    fetchVideos();
    fetchCourses();
  }, []);

  const fetchVideos = async () => {
    const { data, error } = await supabase.from("videos").select("*");
    if (error) console.error("Fetch error:", error);
    else setVideos(data);
  };

  const fetchCourses = async () => {
    const { data, error } = await supabase.from("courses").select("*");
    if (error) console.error("Fetch error:", error);
    else setCourses(data);
  };

  // Sign in with Google
  const signInWithGoogle = async () => {
    setLoading(true);
    const { user, error } = await supabase.auth.signIn({ provider: "google" });
    if (error) console.error("Google login error:", error);
    else setUser(user);
    setLoading(false);
  };

  // Sign out
  const signOut = async () => {
    await supabase.auth.signOut();
    setUser(null);
  };

  // Upload video
  const uploadVideo = async (file) => {
    const { data, error } = await supabase.storage
      .from("videos")
      .upload(`video-${Date.now()}.mp4`, file);

    if (error) console.error("Upload error:", error);
    else {
      console.log("Video uploaded:", data);
      await saveVideoMetadata(data.path);
    }
  };

  const saveVideoMetadata = async (filePath) => {
    const { data, error } = await supabase
      .from("videos")
      .insert([{ file_path: filePath, mentor_id: user.id }]);

    if (error) console.error("Metadata save error:", error);
    else console.log("Metadata saved:", data);
  };

  // Add course
  const addCourse = async (title, description, category, price) => {
    const { data, error } = await supabase
      .from("courses")
      .insert([{ title, description, category, price, mentor_id: user.id }]);

    if (error) console.error("Error adding course:", error);
    else console.log("Course added:", data);
  };

  // Handle payment
  const handlePayment = async (courseId, price) => {
    const stripe = await stripePromise;

    const response = await fetch("/api/create-checkout-session", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ courseId, price }),
    });

    const session = await response.json();

    const { error } = await stripe.redirectToCheckout({
      sessionId: session.id,
    });

    if (error) console.error("Stripe error:", error);
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100">
      <h1 className="text-3xl font-bold text-center">Welcome to ASPIRA Mentorship</h1>

      {!user ? (
        <button
          onClick={signInWithGoogle}
          disabled={loading}
          className="mt-4 px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
        >
          {loading ? "Signing in..." : "Sign in with Google"}
        </button>
      ) : (
        <div className="mt-4">
          <p>Welcome, {user.email}!</p>
          <button
            onClick={signOut}
            className="mt-2 px-4 py-2 bg-red-500 text-white rounded"
          >
            Sign Out
          </button>
        </div>
      )}

      {/* Video Library */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold">Video Library</h2>
        <input
          type="file"
          onChange={(e) => uploadVideo(e.target.files[0])}
          className="mt-2"
        />
        <div className="mt-4">
          {videos.map((video) => (
            <div key={video.id} className="mt-2">
              <video
                controls
                src={supabase.storage.from("videos").getPublicUrl(video.file_path).publicUrl}
                className="w-full"
              />
              <p>Uploaded by: {video.mentor_id}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Course Categories */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold">Course Categories</h2>
        <div className="mt-4">
          {courses.map((course) => (
            <div key={course.id} className="mt-2 p-4 bg-white rounded shadow">
              <h3 className="text-xl font-bold">{course.title}</h3>
              <p>{course.description}</p>
              <p>Category: {course.category}</p>
              <button
                onClick={() => handlePayment(course.id, course.price)}
                className="mt-2 px-4 py-2 bg-green-500 text-white rounded"
              >
                Buy Course for ${course.price}
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Admin Dashboard */}
      {user?.email === "admin@example.com" && (
        <div className="mt-8">
          <h2 className="text-2xl font-bold">Admin Dashboard</h2>
          <p>Total Users: {user ? 1 : 0}</p>
          <p>Total Courses: {courses.length}</p>
        </div>
      )}
    </div>
  );
} 
